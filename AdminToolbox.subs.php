<?php/** * Admin Toolbox, little functions that are a big PITA * * @package Admin Toolbox * @license This Source Code is subject to the terms of the Mozilla Public License * version 1.1 (the "License"). You can obtain a copy of the License at * http://www.mozilla.org/MPL/1.1/. * * @version 1.0 */if (!defined('ELK'))	die('No access...');function atb_boards(){	$db = database();	// First thing's first - get all the boards in the system	$request = $db->query('', '		SELECT			id_board		FROM {db_prefix}boards',		array()	);	$boards = array();	while ($row = $db->fetch_assoc($request))		$boards[$row['id_board']] = $row['id_board'];	$db->free_result($request);	return $boards;}function atb_members_logtopics($not_visited, $increment){	$db = database();	// Load a group of members from the log_topics table who have not been active  ...	$request = $db->query('', '		SELECT			DISTINCT lt.id_member		FROM {db_prefix}log_topics AS lt			LEFT JOIN {db_prefix}members AS m ON (m.id_member = lt.id_member)		WHERE lt.id_topic > {int:zero} ' . ($not_visited == 0 ? '' : '			AND m.last_login < {int:not_visited} ') . '		LIMIT {int:start}, {int:number}',		array(			'start' => 0,			'zero' => 0,			'number' => $increment,			'not_visited' => $not_visited,		)	);	$total_rows = $db->num_rows($request);	$members = array();	while ($row = $db->fetch_assoc($request))		$members[] = $row['id_member'];	$db->free_result($request);	return array($members, $total_rows);}/** * Mark as read topics and boards * * @param mixed[] $inserts */function atb_mark_read($inserts){	$db = database();	// Do the updates in a route 44 big gulp.	if (!empty($inserts))	{		// Update log_mark_read and log_boards for these members just like they hit mark all as read		$db->insert('replace',			'{db_prefix}log_mark_read',			array('id_msg' => 'int', 'id_member' => 'int', 'id_board' => 'int'),			$inserts,			array('id_board', 'id_member')		);		$db->insert('replace',			'{db_prefix}log_boards',			array('id_msg' => 'int', 'id_member' => 'int', 'id_board' => 'int'),			$inserts,			array('id_board', 'id_member')		);	}}/** * Mark messages read in log topics * * @param int[] $members */function atb_mark_log_topics($members){	$db = database();	if (!empty($members))	{		$db->query('', '			DELETE FROM {db_prefix}log_topics			WHERE id_topic > {int:zero}				AND id_member IN ({array_int:members})',			array(				'zero' => 0,				'members' => $members,			)		);	}}/** * Merge Topics * * @param int $dstid * @param int $srcid */function atb_merge_topics($dstid, $srcid){	$db = database();	// Update the topics owners	$db->query('', '			UPDATE {db_prefix}topics			SET id_member_started = {int:dstid}			WHERE id_member_started = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Update the topics updated by member field as well	$db->query('', '			UPDATE {db_prefix}topics			SET id_member_updated = {int:dstid}			WHERE id_member_updated = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);}/** * Merge Posts * * @param int $dstid * @param int $srcid */function atb_merge_posts($dstid, $srcid){	$db = database();	$db->query('', '		UPDATE {db_prefix}messages		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);}/** * Merge Attachments * * @param int $dstid * @param int $srcid */function atb_merge_attachments($dstid, $srcid){	$db = database();	// The new ID get all the old ids attachments as well	$db->query('', '		UPDATE {db_prefix}attachments		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);}/** * Merge Private Messages * * @param int $dstid * @param int $srcid * @param bool $deluser */function atb_merge_pm($dstid, $srcid, $deluser){	$db = database();	// First the ones you sent	$db->query('', '		UPDATE {db_prefix}personal_messages		SET id_member_from = {int:dstid}		WHERE id_member_from = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// And now what you have received ... but a bit more work is required here :(	// Get all of the current PMs for these users	$request = $db->query('', '		SELECT id_pm, id_member		FROM {db_prefix}pm_recipients		WHERE id_member = {int:dstid}			OR id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid,		)	);	while ($row = $db->fetch_assoc($request))		$current_pms[$row['id_member']][] = $row['id_pm'];	$db->free_result($request);	// If they don't already have them, they get them, otherwise they loose them	$current_dst_pms = isset($current_pms[$dstid]) ? $current_pms[$dstid] : array();	$current_src_pms = isset($current_pms[$srcid]) ? $current_pms[$srcid] : array();	// All of the src pms that the dst does not have or one they do already have	$move_pms = array_diff($current_src_pms, $current_dst_pms);	$remove_pms = array_intersect($current_src_pms, $current_dst_pms);	// And now you get the ones you do not already have	$db->query('', '		UPDATE {db_prefix}pm_recipients		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}' . (empty($move_pms) ? '' : '			AND (FIND_IN_SET(id_pm, {string:move_pms}) != 0)'),		array(			'dstid' => $dstid,			'srcid' => $srcid,			'move_pms' => implode(',', $move_pms),		)	);	// If we are not removing this user, then we need to adjust the pm totals	if (empty($deluser))	{		// And now remove the ones that were already there		$db->query('', '			DELETE FROM {db_prefix}pm_recipients			WHERE id_member = {int:srcid}' . (empty($remove_pms) ? '' : '				AND (FIND_IN_SET(id_pm, {string:remove_pms}) != 0)'),			array(				'srcid' => $srcid,				'remove_pms' => implode(',', $remove_pms),			)		);		updateMemberData($srcid, array('unread_messages' => 0));	}}/** * Some misc things, like Calendar Events, Polls, other 'Logs' * * @param int $dstid * @param int $srcid */function atb_merge_others($dstid, $srcid){	$db = database();	// Error log entries	$db->query('', '		UPDATE {db_prefix}log_errors		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Profile log actions	$db->query('', '		UPDATE {db_prefix}log_actions		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Profile log comments	$db->query('', '		UPDATE {db_prefix}log_comments		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Calendar entries	$db->query('', '		UPDATE {db_prefix}calendar		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Did you start some polls under the old ID?	$db->query('', '		UPDATE {db_prefix}polls		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Your old buddy is now your new buddy	$db->query('', '		UPDATE {db_prefix}members		SET buddy_list = TRIM(BOTH \',\' FROM REPLACE(CONCAT(\',\', buddy_list, \',\'), \',{int:srcid},\', \',{int:dstid},\'))		WHERE FIND_IN_SET({int:srcid}, buddy_list)',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// And buttheads are still buttheads :)	$db->query('', '		UPDATE {db_prefix}members		SET pm_ignore_list = TRIM(BOTH \',\' FROM REPLACE(CONCAT(\',\', pm_ignore_list, \',\'), \',{int:srcid},\', \',{int:dstid},\'))		WHERE FIND_IN_SET({int:srcid}, pm_ignore_list)',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);}/** * Merge post and pm Drafts * * @param int $dstid * @param int $srcid */function atb_merge_drafts($dstid, $srcid){	$db = database();	$db->query('', '		UPDATE {db_prefix}user_drafts		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);}/** * Merge Likes * * Since the primary key is the member id to message, we need to * do this in a few steps. * 1) find all src and dst likes. * 2) Move likes from src to dst that dst does not already have. * 3) Remove the remaining src ones. * 4) update poster_id from src to dst * 5) check for poster = member if can't like your own is set * * @param int $dstid * @param int $srcid */function atb_merge_likes($dstid, $srcid){	global $modSettings;	$db = database();	// All the messages liked by the source member	$request = $db->query('', '		SELECT id_msg		FROM {db_prefix}message_likes		WHERE id_member = {int:srcid}',		array(			'srcid' => $srcid,		)	);	$src_liked = array();	while ($row = $db->fetch_assoc($request))		$src_liked[] = $row['id_msg'];	$db->free_result($request);	// All the messages liked by the destination member	$request = $db->query('', '		SELECT id_msg		FROM {db_prefix}message_likes		WHERE id_member = {int:dstid}',		array(			'dstid' => $dstid,		)	);	$dst_liked = array();	while ($row = $db->fetch_assoc($request))		$dst_liked[] = $row['id_msg'];	$db->free_result($request);	// Source likes that the destination did already like	$update = array_diff($src_liked, $dst_liked);	if (!empty($update))	{		// Now they liked those too		$db->query('', '			UPDATE {db_prefix}message_likes			SET id_member = {int:dstid}			WHERE id_member = {int:srcid}				AND id_msg IN ({array_int:update})',			array(				'dstid' => $dstid,				'srcid' => $srcid,				'update' => $update			)		);	}	// Remove the source entries	$db->query('', '		DELETE FROM {db_prefix}message_likes		WHERE id_member = {int:srcid}',		array(			'srcid' => $srcid,		)	);	updateMemberData($srcid, array('likes_given' => 0));	// Update the poster id so they get the likes they deserve	$db->query('', '		UPDATE {db_prefix}message_likes		SET id_poster = {int:dstid}		WHERE id_poster = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	updateMemberData($srcid, array('likes_received' => 0));	// Adjust for can't like your own stuff	if (empty($modSettings['likeAllowSelf']))		$db->query('', '			DELETE FROM {db_prefix}message_likes			WHERE id_member = {int:dstid}				AND id_poster = {int:dstid}',			array(				'dstid' => $dstid,				'srcid' => $srcid			)		);	// All the likes given totals	$request = $db->query('', '		SELECT count(id_member)		FROM {db_prefix}message_likes		WHERE id_member = {int:dstid}',		array(			'dstid' => $dstid,		)	);	$total = $db->fetch_row($request);	$db->free_result($request);	updateMemberData($dstid, array('likes_given' => (int) $total[0]));	// All the likes received totals	$request = $db->query('', '		SELECT COUNT(id_poster)		FROM {db_prefix}message_likes		WHERE id_poster = {int:dstid}',		array(			'dstid' => $dstid,		)	);	$total = $db->fetch_row($request);	$db->free_result($request);	updateMemberData($dstid, array('likes_received' => (int) $total[0]));}/** * Merge Mentions * * @param int $dstid * @param int $srcid */function atb_merge_mentions($dstid, $srcid){	$db = database();	// Update those given	$db->query('', '		UPDATE {db_prefix}log_mentions		SET id_member = {int:dstid}		WHERE id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Update the ones received	$db->query('', '		UPDATE {db_prefix}log_mentions		SET id_member_from = {int:dstid}		WHERE id_member_from = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	// Load the real (display) names for these members	$request = $db->query('', '		SELECT			id_member, real_name		FROM {db_prefix}members		WHERE id_member = {int:srcid}			OR id_member = {int:dstid}',		array(			'dstid' => $dstid,			'srcid' => $srcid		)	);	$names = array();	while ($row = $db->fetch_assoc($request))		$names[$row['id_member']] = $row['real_name'];	$db->free_result($request);	// Replace the mention pointer in all the messages, this may be a bit tough on the server	$db->query('', '		UPDATE {db_prefix}messages		SET body = REPLACE(body, {raw:src}, {raw:dst})',		array(			'dst' => '"[member=' . (int) $dstid . ']' . $names[$dstid] . '[/member]"',			'src' => '"[member=' . (int) $srcid . ']' . $names[$srcid] . '[/member]"',		)	);}/** * Copy custom fields from src fields that are not filled in * for the destination * * @param int $dstid * @param int $srcid */function atb_merge_custom_fields($dstid, $srcid){	$db = database();	// Get all of the current PMs for these users	$request = $db->query('', '		SELECT id_member, variable, value		FROM {db_prefix}custom_fields_data		WHERE id_member = {int:dstid}			OR id_member = {int:srcid}',		array(			'dstid' => $dstid,			'srcid' => $srcid,		)	);	$src_fields = array();	$dst_fields = array();	while ($row = $db->fetch_assoc($request))	{		if ($row['id_member'] == $srcid)			$src_fields[$row['variable']] = $row['value'];		else			$dst_fields[$row['variable']] = $row['value'];	}	$db->free_result($request);	// Use the src data if the dst data has not been set	$changes = array();	foreach ($src_fields as $variable => $value)	{		if (empty($dst_fields[$variable]))			$changes[] = array($variable, $value, $srcid);	}	// Do the changes.	if (!empty($changes))	{		$db->insert('replace',			'{db_prefix}custom_fields_data',			array('variable' => 'string-255', 'value' => 'string-65534', 'id_member' => 'int'),			$changes,			array('variable', 'id_member')		);	}}/** * The oldest message date */function atb_oldest_message(){	$db = database();	$request = $db->query('', '		SELECT			MIN(id_msg), date(FROM_UNIXTIME(poster_time))		FROM {db_prefix}messages		LIMIT 1',		array()	);	list ($dummy, $message_start_date) = $db->fetch_row($request);	$db->free_result($request);	return $message_start_date;}/** * When the daily stats started, plus some totals */function atb_stats_start(){	$db = database();	$result = $db->query('', '		SELECT			SUM(most_on) AS most_on, MIN(date) AS stat_start_date, SUM(hits) AS hits, SUM(posts) as posts		FROM {db_prefix}log_activity',		array()	);	$stats = $db->fetch_assoc($result);	$db->free_result($result);	return $stats;}/** * Get the existing monthly statistics data * * @param int $message_start_date */function atb_load_monthly_stats($message_start_date){	$db = database();	$result = $db->query('', '		SELECT			SUM(most_on) AS most_on, SUM(hits) AS hits, date		FROM {db_prefix}log_activity		GROUP BY EXTRACT(YEAR_MONTH FROM (date))		ORDER BY date ASC',		array()	);	$stats_data = array();	while ($row = $db->fetch_assoc($result))	{		// Build the hits, most on and days delta arrays		$stats_data['hits'][] = $row['hits'];		$stats_data['most_on'][] = $row['most_on'];		$stats_data['delta'][] = round((strtotime($row['date']) - strtotime($message_start_date)) / 86400);	}	$db->free_result($result);	return $stats_data;}function atb_validate_member_names($merge_to, $merge_from, $query_limit, $query){	$db = database();	$autosuggest_merge_from = null;	$autosuggest_merge_to = null;	// Validate these are member names	$request = $db->query('', '		SELECT			id_member, real_name		FROM {db_prefix}members		WHERE {raw:query}		LIMIT {int:limit}',		array(			'merge_to' => $merge_to,			'merge_from' => $merge_from,			'limit' => $query_limit,			'query' => $query,		)	);	// if we got back more than $query_limit rows, then the names are not unique, this *should* not happen, but those	// little mod-ers can cause this since there is no uniqness in the database on this col to prevent it so we check to be sure.	if ($db->num_rows($request) == $query_limit - 1)	{		while ($row = $db->fetch_assoc($request))		{			if (trim($row['real_name']) === trim($merge_to))				$autosuggest_merge_to = (int) $row['id_member'];			elseif (trim($row['real_name']) === trim($merge_from))				$autosuggest_merge_from = (int) $row['id_member'];		}	}	$db->free_result($request);	return array($autosuggest_merge_to, $autosuggest_merge_from);}